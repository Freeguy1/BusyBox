import java.text.SimpleDateFormat

def versionMajor = 6
def versionMinor = 7
def versionPatch = 3
def versionBuild = 0
def versionSuffix = versionBuild > 0 ? "-beta" : ""

buildscript {
  repositories {
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    classpath 'io.fabric.tools:gradle:1.21.7'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
  maven { url 'https://maven.fabric.io/public' }
}

android {
  compileSdkVersion 25
  buildToolsVersion '25.0.0'

  productFlavors {
    free {
      applicationId "com.jrummy.busybox.installer"
    }
    paid {
      applicationId "com.jrummy.busybox.installer.pro"
    }
    staging {
      applicationIdSuffix = ".installer.staging"
      ext.betaDistributionGroupAliases = "Internal"
      ext.betaDistributionNotifications = true
      ext.betaDistributionReleaseNotes=""
    }
  }

  signingConfigs {
    release {
      storeFile file(KEYSTORE_FILE)
      storePassword KEYSTORE_PASSWORD
      keyAlias KEYSTORE_ALIAS
      keyPassword KEYSTORE_PASSWORD
    }
  }

  defaultConfig {
    applicationId "com.jrummyapps.busybox"
    minSdkVersion 14
    targetSdkVersion 25
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}${versionSuffix}"
    buildConfigField "String", "GIT_SHA", "\"${gitSha()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }
}

dependencies {
  stagingCompile 'com.google.firebase:firebase-ads:10.0.1'
  stagingCompile 'com.anjlab.android.iab.v3:library:1.0.32'

  freeCompile 'com.google.firebase:firebase-ads:10.0.1'
  freeCompile 'com.anjlab.android.iab.v3:library:1.0.32'

  compile 'com.jrummyapps:sweetsweetdesserts:1.0.0'
  compile 'com.jaredrummler:material-spinner:1.0.9'
  compile 'com.jaredrummler:fastscroll-recyclerview:1.0.1'
  compile 'org.apache.commons:commons-compress:1.5'
  compile 'com.commit451:elasticdragdismisslayout:1.0.2'
  compile 'com.jrummyapps:texteditor:2.0.0'
  compile 'com.jrummyapps:downloader:2.0.0'
  compile 'com.jrummyapps:morphing-dialog:1.0.0'
  compile 'com.jrummyapps:html-builder:1.0.1'
  compile 'com.jrummyapps:legacy-obfuscate:1.0.0'
}

apply plugin: 'com.google.gms.google-services'

afterEvaluate {
  initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
  def propertiesFile = file('fabric.properties')
  if (!propertiesFile.exists()) {
    def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
      entry(key: "apiSecret", value: FABRIC_API_SECRET)
      entry(key: "apiKey", value: FABRIC_API_KEY)
    }
  }
}

def gitSha() {
  return "git --git-dir=${projectDir}/../.git --work-tree=${projectDir}/.. rev-parse --short HEAD".execute().text.trim()
}

def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}